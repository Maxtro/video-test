{"version":3,"sources":["Components/GreenElement/GreenElement.module.css","Components/VideoComponent/Video.module.css","Components/GreenElement/GreenElement.tsx","Components/VideoComponent/Video.tsx","api.tsx","Redux/Reduser.ts","Redux/selectors.ts","Components/VideoComponent/VideoContainer.tsx","Components/VideoAnalytics/Analytics.tsx","Components/VideoAnalytics/AnalyticsContainer.tsx","App.tsx","serviceWorker.ts","Redux/ReduxStore.ts","index.tsx","Components/VideoAnalytics/Analystics.module.css"],"names":["module","exports","GreenElement","props","greenElement","useRef","useEffect","current","style","top","greenElementStyle","left","height","width","className","element","ref","div","Video","videoPlayer","currentTime","currentTimeTo","seekTimeUpdate","time","getCurrentTime","video_pos","video","onClick","isPlay","play","addEventListener","videoPlayStop","pause","removeEventListener","src","videoURL","type","Math","floor","analyticsAPI","Axios","get","initialState","analysticsDate","currentIndex","actions","isPlayNew","data","NewAnalysticsData","NewCurrentTime","timeTo","index","payload","NewCurrentTimeTo","newCurrentIndex","NewElement","Reduser","state","action","getIsPlay","getVideoURL","getDataAnalystics","getVideoTime","getGreenElementStyle","getVideoTimeTo","getIndex","connector","connect","dispatch","getState","dateArray","i","length","timestamp","duration","zone","Analytics","dateAnalystics","Date","min","getMinutes","sec","getSeconds","millisec","getMilliseconds","dateAnalysticsObject","id","push","block","sort","a","b","map","date","key","block_line_selected","block_line","getCurrentTimeTo","onChangeTime","AnalyticsContainer","React","memo","getAnalysticsData","response","console","log","indexLine","App","Boolean","window","location","hostname","match","rootReduser","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e0603b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"GreenElement_element__1SEbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"video_pos\":\"Video_video_pos__1Go6z\"};","import React, { useRef, useEffect } from 'react'\nimport style from './GreenElement.module.css'\nimport { GreenElementType } from '../../Redux/Reduser'\n\ntype PropsType = {\n    greenElementStyle: GreenElementType\n}\n\nconst GreenElement: React.FC<PropsType> = (props) => {\n\n    const greenElement = useRef<any>(null)\n\n    useEffect(() => {\n        greenElement.current.style.top = `${props.greenElementStyle.top}px`\n        greenElement.current.style.left = `${props.greenElementStyle.left}px`\n        greenElement.current.style.height = `${props.greenElementStyle.height}px`\n        greenElement.current.style.width = `${props.greenElementStyle.width}px`\n    }, [props])\n\n    return  <div className={style.element} ref={div => greenElement.current = div}></div>\n}\n\nexport default GreenElement","import React, { useRef, useEffect } from 'react'\nimport GreenElement from '../GreenElement/GreenElement'\nimport style from './Video.module.css'\nimport { GreenElementType } from '../../Redux/Reduser'\n\ntype PropsType = {\n    isPlay: boolean\n    videoURL: string\n    currentTime: number\n    currentTimeTo: number\n    greenElementStyle: GreenElementType\n    getCurrentTime: (time: number) => void\n    videoPlayStop: (play: boolean) => void\n}\nconst Video: React.FC<PropsType> = (props) => {\n    \n    const videoPlayer = useRef<any>(null)\n\n    useEffect(() => {\n        videoPlayer.current.currentTime = props.currentTimeTo / 1000\n    }, [props.currentTimeTo])\n\n    const seekTimeUpdate = () => {\n       let time = videoPlayer.current.currentTime * 1000\n       props.getCurrentTime(time)\n    }\n\n    const onPlayVideo = () => {\n        if(props.isPlay === false){\n            videoPlayer.current.play()\n            videoPlayer.current.addEventListener(\"timeupdate\",seekTimeUpdate,false)\n            props.videoPlayStop(true)\n        } else {\n            videoPlayer.current.pause()\n            videoPlayer.current.removeEventListener(\"timeupdate\",seekTimeUpdate,false)\n            props.videoPlayStop(false)\n        }\n    }\n\n\n    return  <div className={style.video_pos}>\n                <GreenElement greenElementStyle={props.greenElementStyle} />\n                <video ref={video => videoPlayer.current = video} width='1300px' height='auto' \n                onClick={() => {onPlayVideo()}} >\n                    <source src={ props.videoURL } type=\"video/mp4\" />\n                </video>\n                <p> { Math.floor(props.currentTime / 1000)} </p>\n            </div>\n\n}\n\nexport default Video ","import Axios from 'axios'\n\nexport const analyticsAPI = {\n    getAnalysticsDate() {\n        return Axios.get('https://www.mocky.io/v2/5e60c5f53300005fcc97bbdd')\n    }\n}","import { Dispatch } from 'redux'\nimport { InferActionType, StateType } from './ReduxStore'\nimport { analyticsAPI } from '../api'\n\nexport type AnalysticsType = {\n    id: number\n    timestamp: number\n    duration: number\n    zone: {\n        left: number\n        top: number\n        width: number\n        height: number\n    }\n}\n\nexport type InitialStateType = {\n    isPlay: boolean\n    videoURL: string\n    analysticsDate: Array<AnalysticsType>\n    currentTime: number\n    currentTimeTo: number\n    greenElementStyle: GreenElementType\n    currentIndex: number\n}\n\nexport type GreenElementType = {\n    left: number\n    top: number\n    width: number\n    height: number\n}\n\nconst initialState: InitialStateType = {\n    isPlay: false,\n    videoURL: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n    analysticsDate: [],\n    currentTime: 0,\n    currentTimeTo: 0,\n    greenElementStyle: {\n        left: 0,\n        top: -100,\n        width: 0,\n        height: 0\n    },\n    currentIndex: -1\n}\n\nconst Reduser = (state = initialState, action: ActionType) => {\n\n    switch (action.type){\n\n        // Видео play / stop\n        case 'IS_VIDEO_PLAY': {\n            return { ...state, isPlay: action.isPlayNew }\n        }\n\n        // Данные аналитики\n        case 'SET_ANALYSTICS_DATA': {\n            return { ...state, analysticsDate: action.NewAnalysticsData }\n        }\n\n        // Текущее время проигрывателя\n        case 'SET_CURRENT_TIME': {\n            return { ...state, currentTime: action.NewCurrentTime }\n        }\n\n        // Текущие данные зеленого элемента\n        case 'SET_GREEN_ELEMENT_STYLE': {\n            return { ...state, greenElementStyle: action.NewElement }\n        }\n        \n        // Время для перемотки видео и индекс элемента списка на который нажали\n        case 'SET_CURRENT_TIME_TO': {\n            return { ...state, currentTimeTo: action.payload.NewCurrentTimeTo, currentIndex: action.payload.newCurrentIndex }\n        }\n\n        default: \n            return state\n    }\n}\n\n// Экшены\ntype ActionType = InferActionType<typeof actions>\nconst actions = {\n    setIsPlay: (play: boolean) => ({ type: 'IS_VIDEO_PLAY', isPlayNew: play} as const),\n    setAnalysticsDate: (data: Array<any>) => ({ type: 'SET_ANALYSTICS_DATA', NewAnalysticsData: data } as const),\n    setCurrentTime: (time: number) => ({ type: 'SET_CURRENT_TIME', NewCurrentTime: time } as const),\n    setCurrentTimeTo: (timeTo: number, index: number) => ({ type: 'SET_CURRENT_TIME_TO', payload: {NewCurrentTimeTo: timeTo, newCurrentIndex: index} } as const),\n    setGreenElementStyle: (element: GreenElementType) => ({ type: 'SET_GREEN_ELEMENT_STYLE', NewElement: element } as const)\n}\n\n// Thunk creators\n// Видео play / stop\nexport const videoPlayStop = (play: boolean) => {\n    return (dispatch: Dispatch<ActionType>) => {\n            dispatch(actions.setIsPlay(play))\n    }\n}\n\n// Запрос данных аналитики с помощью analyticsAPI\nexport const getAnalysticsData = () =>  async (dispatch: Dispatch<ActionType>) => {\n    try{\n        let response = await analyticsAPI.getAnalysticsDate()\n        dispatch(actions.setAnalysticsDate(response.data))\n        } catch(error){\n           console.log(error) \n        }\n}\n\n// Сравнение текущего времени проигрывателя с временем из данных аналитики\nexport const getCurrentTime = (time: number) => {\n    return (dispatch: Dispatch<ActionType>, getState: () => StateType) => {\n            let dateArray = getState().Reduser.analysticsDate\n            for (let i=0; i<dateArray.length; i++){\n                if( time >= dateArray[i].timestamp && \n                    time <= dateArray[i].timestamp + dateArray[i].duration )\n                        {\n                            dispatch(actions.setGreenElementStyle(dateArray[i].zone))                   \n                        } \n            }\n            dispatch(actions.setCurrentTime(time))\n    }\n}\n\n// Установить при клике время проигрывытеля и индекс элемента списка \nexport const getCurrentTimeTo = (timeTo: number, indexLine: number) => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.setCurrentTimeTo(timeTo, indexLine))\n    }\n}\n\nexport default Reduser\n","import { StateType } from '../Redux/ReduxStore'\n\nexport const getIsPlay = (state: StateType) => {\n    return state.Reduser.isPlay\n}\n\nexport const getVideoURL = (state: StateType) => {\n    return state.Reduser.videoURL\n}\n\nexport const getDataAnalystics = (state: StateType) => {\n    return state.Reduser.analysticsDate\n}\n\nexport const getVideoTime = (state: StateType) => {\n    return state.Reduser.currentTime\n} \n\nexport const getGreenElementStyle = (state: StateType) => {\n    return state.Reduser.greenElementStyle\n}\n\nexport const getVideoTimeTo = (state: StateType) => {\n    return state.Reduser.currentTimeTo\n}\n\nexport const getIndex = (state: StateType) => {\n    return state.Reduser.currentIndex\n}","import React from 'react'\nimport Video from './Video'\nimport { StateType } from '../../Redux/ReduxStore'\nimport { videoPlayStop, getCurrentTime, GreenElementType } from '../../Redux/Reduser'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { getIsPlay, getVideoURL, getVideoTime, getGreenElementStyle, getVideoTimeTo } from '../../Redux/selectors'\n\ntype MapStateToPropsType = {\n    isPlay: boolean\n    videoURL: string\n    currentTime: number\n    currentTimeTo: number\n    greenElementStyle: GreenElementType\n}\n\ntype MapDispatchToPropsType = {\n    videoPlayStop: (play: boolean) => void\n    getCurrentTime: (time: number, currentIndex: number) => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & PropsFromRedux\n\nconst VideoContainer: React.FC<PropsType> = (props) => {\n\n    return  <Video \n                isPlay={ props.isPlay } \n                videoURL={ props.videoURL }  \n                currentTime={ props.currentTime }\n                currentTimeTo={ props.currentTimeTo }\n                greenElementStyle={ props.greenElementStyle }\n                videoPlayStop={ props.videoPlayStop } \n                getCurrentTime = { props.getCurrentTime }\n            />\n\n}\n\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\n    return {\n        isPlay: getIsPlay(state),\n        videoURL: getVideoURL(state),\n        currentTime: getVideoTime(state),\n        greenElementStyle: getGreenElementStyle(state),\n        currentTimeTo: getVideoTimeTo(state),\n    }\n}\n\nconst connector = connect(mapStateToProps, { videoPlayStop, getCurrentTime })\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(VideoContainer)","import React from 'react'\nimport { AnalysticsType } from '../../Redux/Reduser'\nimport style from './Analystics.module.css'\n\ntype PropsType = {\n    analysticsDate: Array<AnalysticsType>\n    currentIndex: number\n    getCurrentTimeTo: (timeTo: number, index: number) => void\n}\n\nconst Analytics: React.FC<PropsType> = (props) => {\n\n    let dateAnalystics = []\n\n    for (let i=0; i < props.analysticsDate.length; i++){\n        let data = new Date(props.analysticsDate[i].timestamp)\n        let min = data.getMinutes()\n        let sec = data.getSeconds()\n        let millisec = data.getMilliseconds()\n        let convTime = `${min}:${sec}:${millisec}`\n        let dateAnalysticsObject = {\n            time: convTime,\n            timestamp: props.analysticsDate[i].timestamp,\n            id: props.analysticsDate[i].id\n        }\n        dateAnalystics.push(dateAnalysticsObject)\n    }\n\n    const onChangeTime = (timestamp: number, index: number) => { \n            props.getCurrentTimeTo(timestamp, index)\n    }\n\n    return  <div className={style.block}>\n            { dateAnalystics.sort((a,b) => (a.time > b.time) ? 1 : ((b.time > a.time) ? -1 : 0)).map( (date, index) => {\n                return  <div key={index} className={index === props.currentIndex ? style.block_line_selected : style.block_line} onClick={() => { onChangeTime(date.timestamp, index) } }>\n                           { index + 1 } - { date.time }\n                        </div>\n            } ) }\n            </div>\n}\n\nexport default Analytics","import React, { useEffect } from 'react'\nimport Analytics from './Analytics'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { StateType } from '../../Redux/ReduxStore'\nimport { getAnalysticsData, AnalysticsType, getCurrentTimeTo } from '../../Redux/Reduser'\nimport { getDataAnalystics, getIndex} from '../../Redux/selectors'\n\ntype MapStateToPropsType = {\n    analysticsDate: Array<AnalysticsType>\n    currentIndex: number\n}\n\ntype MapDispatchToPropsType = {\n    getAnalysticsData: () => void\n    getCurrentTimeTo: (timeTo: number, index: number) => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & PropsFromRedux\n\nconst AnalyticsContainer: React.FC<PropsType> = React.memo((props) => {\n\n    useEffect(() => {\n        props.getAnalysticsData()\n    }, [props])\n\n    return <Analytics \n                analysticsDate={ props.analysticsDate } \n                currentIndex={ props.currentIndex } \n                getCurrentTimeTo={ props.getCurrentTimeTo }\n                />\n})\n\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\n    return {\n        analysticsDate: getDataAnalystics(state),\n        currentIndex: getIndex(state),\n    }\n}\n\nconst connector = connect(mapStateToProps, { getAnalysticsData, getCurrentTimeTo })\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(AnalyticsContainer)\n","import React from 'react';\nimport './App.css';\nimport VideoContainer from './Components/VideoComponent/VideoContainer';\nimport AnalyticsContainer from './Components/VideoAnalytics/AnalyticsContainer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div>\n      <VideoContainer />\n      </div>\n      <div className='block'>\n      <AnalyticsContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport Reduser from './Reduser'\n\nlet rootReduser = combineReducers({\n    Reduser\n})\n\ntype ReduserType = typeof rootReduser\nexport type StateType = ReturnType<ReduserType>\n\ntype PropetiesType<T> = T extends { [key: string]: infer U } ? U : never\nexport type InferActionType<T extends { [key: string]: (...args: any) => any }> =  ReturnType<PropetiesType<T>>\n\nlet store = createStore(rootReduser, applyMiddleware(thunkMiddleware))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Redux/ReduxStore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Analystics_block__2rm2m\",\"block_line\":\"Analystics_block_line__2ZcOT\",\"block_line_selected\":\"Analystics_block_line_selected__38aJu\"};"],"sourceRoot":""}